var express = require('express');
var Sequelize = require('sequelize');

module.exports = function(Entity) {
  var router = express.Router();

  router.get('/', function(req, res, next) {
    // Entity.attributes[name].type.key
    if (req.query.hasOwnProperty('help')) {
      var attrs = [];
      for (var k in Entity.attributes)
        attrs.push({
          name: k,
          type: Entity.attributes[k].type.key,
          values: Entity.attributes[k].type.values,
          allowNull: Entity.attributes[k].allowNull,
          primaryKey: Entity.attributes[k].primaryKey,
          _autoGenerated: Entity.attributes[k]._autoGenerated
        })
      return res.json({
        'entity': Entity.name,
        'attributes': attrs,
      })
    }
    Entity.findAll().then(function(objs) {
      res.json(objs);
    }).catch(function(err){return res.status(500).json({message:err.message})});
  });

  router.get('/:id/', function(req, res, next) {
    Entity.findOne({where:{id:req.params.id}}).then(function(obj) {
      if (!obj) return res.status(404).json({message:'Not Found'});
      res.json(obj);
    }).catch(function(err){return res.status(500).json({message:err.message})});
  });

  router.post('/', function(req, res, next) {
    //return res.json()
    var includes = []
    for (var aname in Entity.associations) {
      if (req.body[aname]) {
        includes.push({model:Entity.associations[aname].target, as: aname, include:includes2})
      }
    }
    return Entity.sequelize.transaction({
      isolationLevel: 'SERIALIZABLE'
    }, function (t) {
      return Entity.create(req.body, {include: includes, transaction: t}).then(function(obj) {
        res.location(req.originalUrl + '/' + obj.id);
        res.status(201).json(obj);
      }).catch(function(err){console.error(err); return res.status(500).json({name:err.name,message:err.message})});
    }).then(function(result) {
      res.status(201).json('ok')
      // transaction has been committed. Do something after the commit if required.
    }).catch(function(err) {
      console.error(err); return res.status(500).json({name:err.name,message:err.message})
      // do something with the err.
    });
  });

  router.patch('/:id/', function(req, res, next) {
    Entity.findOne({where:{id:req.params.id}}).then(function(obj) {
      obj.update(req.body).then(function(obj) {
        if (!obj) return res.status(404).json({message:'Not Found'});
        res.json(obj);
      }).catch(function(err){return res.status(500).json({message:err.message})})
    }).catch(function(err){return res.status(500).json({message:err.message})});
  });

  router.delete('/:id/', function(req, res, next) {
    Entity.findOne({where:{id:req.params.id}}).then(function(obj) {
      obj.destroy().then(function() {
        res.status(204).json({message:'No Content'});
      }).catch(function(err){return res.status(500).json({message:err.message})})
    }).catch(function(err){return res.status(500).json({message:err.message})});
  });

  return router
}